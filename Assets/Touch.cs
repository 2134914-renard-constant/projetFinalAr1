//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Touch.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Touch: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Touch()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Touch"",
    ""maps"": [
        {
            ""name"": ""ARControls"",
            ""id"": ""b32a6493-8b5c-4106-a36c-7d666fff2fb9"",
            ""actions"": [
                {
                    ""name"": ""ToucherEcran"",
                    ""type"": ""PassThrough"",
                    ""id"": ""21c8d7d9-6932-4c0c-a9d3-dbdebc87d386"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4f6c114-b386-4792-88ce-00d923a81eb2"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToucherEcran"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ddcdf40-90b3-4575-96ec-d883ec17ea44"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToucherEcran"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ARControls
        m_ARControls = asset.FindActionMap("ARControls", throwIfNotFound: true);
        m_ARControls_ToucherEcran = m_ARControls.FindAction("ToucherEcran", throwIfNotFound: true);
    }

    ~@Touch()
    {
        UnityEngine.Debug.Assert(!m_ARControls.enabled, "This will cause a leak and performance issues, Touch.ARControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ARControls
    private readonly InputActionMap m_ARControls;
    private List<IARControlsActions> m_ARControlsActionsCallbackInterfaces = new List<IARControlsActions>();
    private readonly InputAction m_ARControls_ToucherEcran;
    public struct ARControlsActions
    {
        private @Touch m_Wrapper;
        public ARControlsActions(@Touch wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToucherEcran => m_Wrapper.m_ARControls_ToucherEcran;
        public InputActionMap Get() { return m_Wrapper.m_ARControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ARControlsActions set) { return set.Get(); }
        public void AddCallbacks(IARControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ARControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ARControlsActionsCallbackInterfaces.Add(instance);
            @ToucherEcran.started += instance.OnToucherEcran;
            @ToucherEcran.performed += instance.OnToucherEcran;
            @ToucherEcran.canceled += instance.OnToucherEcran;
        }

        private void UnregisterCallbacks(IARControlsActions instance)
        {
            @ToucherEcran.started -= instance.OnToucherEcran;
            @ToucherEcran.performed -= instance.OnToucherEcran;
            @ToucherEcran.canceled -= instance.OnToucherEcran;
        }

        public void RemoveCallbacks(IARControlsActions instance)
        {
            if (m_Wrapper.m_ARControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IARControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ARControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ARControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ARControlsActions @ARControls => new ARControlsActions(this);
    public interface IARControlsActions
    {
        void OnToucherEcran(InputAction.CallbackContext context);
    }
}
